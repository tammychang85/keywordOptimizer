import generateKeywordIdeas as getkeywords
import estimateKeywordTraffic as getEstimation


def setStrategy(maxPopulation=10, maxIteration=10, minImprovement=5, parentNum=5):
    maxPopulation = maxPopulation # maximum of keyword population
    minImprovement = minImprovement # minimum improvement of keywords acceptable between two iterations
    maxIteration = maxIteration # how many rouds of optimization shoud be taken
    parentNum = parentNum # num of keywords used to find alternatives

    return maxPopulation, maxIteration, minImprovement, parentNum


# read candidateKeywords files generated by several ways 
def generateSeed(kwywordsTextPath):
    candidateKeywords = []
    with open(kwywordsTextPath,'r',encoding="utf-8") as f:
        candidateKeywords = f.read().strip().split(' ')
    return candidateKeywords

# estimate traffic for keywords
def estimateTraffic(keywordList, matchType):
    targetKewords = []
    for eachKeyword in keywordList:
        targetKewords.append({'text': eachKeyword, 'matchType': matchType})

    getEstimation.run(targetKewords)
    #estimations = getEstimation(targetKewords)
    #return estimations

# calculate scores for keywords by traffic estimations & return some of the best depends on strategy
def calaulateScore(keywordEstimations):
    pass


# find similar keywords using parentKeywords
def findAlternatives(parentKeywords):
    pass


# choose some of the best & worst keywords, remove the worst ones and return the best ones depends on strategy
def evaluate(keywordScores):
    pass


# coordinate all the funtions above during the process of optimization
def optimize():
    
    # get seed keywords
    seedKeywords = generateSeed(kwywordsTextPath)

    # get estimations of seedKeywords
    seedEstimations = estimateTraffic(seedKeywords)

    # get scores of seedKeywords
    seedScores = calaulatorScore(seedEstimations)


def main(kwywordsTextPath):
    
    keywordCollection = optimize(kwywordsTextPath) # recommended keywords

    return keywordCollection



if __name__ == '__main__':
    seedKeywords = generateSeed('jiebaTFIDF.txt')
    estimateTraffic(seedKeywords, 'EXACT')

